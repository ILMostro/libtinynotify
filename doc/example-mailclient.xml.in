<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
	<!ENTITY % local.common.attrib "xmlns:xi CDATA #FIXED 'http://www.w3.org/2003/XInclude'">
]>

<refentry id="example-mailclient">
<refmeta>
	<refentrytitle role="top_of_page" id="example-mailclient.top_of_page">Mail client</refentrytitle>
	<manvolnum>7</manvolnum>
	<refmiscinfo>
		LIBTINYNOTIFY Library
	</refmiscinfo>
</refmeta>
<refnamediv>
	<refname>Mail client</refname>
	<refpurpose>an example involving mail client checking mail for multiple accounts</refpurpose>
</refnamediv>

<refsect1 id="example-mailclient.description" role="desc">
	<title role="desc.title">Description</title>
	<para>
		The following example shows how to use libtinynotify to handle
		displaying new mail notification while doing mail fetching for multiple
		accounts.
	</para>

	<para>
		In this particular case, a <link linkend="NotifySession"><type>NotifySession</type></link>
		is instantiated globally which might not be the sanest solution but it's
		quite straightforward.
	</para>

	<para>
		A single <link linkend="Notification"><type>Notification</type></link>
		is instantiated for the whole mail checking process with a template
		summary &amp; body. The template is filled with actual numbers when
		notifications are displayed.
	</para>

	<para>
		Use of <link linkend="notification-update"><function>notification_update()</function></link>
		allows libtinynotify to keep track of notification display by server
		and replace the outdated notification with the one containing new
		numbers.
	</para>

	<example>
		<title>Mail client using libtinynotify</title>
		<programlisting><![CDATA[
/* compile & link with libtinynotify.pc */
#include <tinynotify.h>

NotifySession notify_session;

/* ... */

void check_new_mail(void) {
	Notification n = notification_new("%d new mails",
		"%d new messages have been fetched from %d mail accounts.");

	MyMailAccount a;
	int mail_count = 0;
	int acc_count = 0;

	for (a = accounts; a; a = a->next) {
		int mails_fetched;
		/* ... */

		if (mails_fetched > 0) {
			mail_count += mails_fetched;
			acc_count++;

			notification_update(n, notify_session,
				mail_count, mail_count, acc_count);
		}
	}

	notificaton_free(n);
}

int main(int argc, char *argv[]) {
	/* ... */

	notify_session = notify_session_new("mymailer", "mailer");

	/* ... */

	notify_session_free(notify_session);
	return 0;
}
	]]></programlisting>
	</example>
</refsect1>

</refentry>
